import 'dart:async';
import 'dart:io';

import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

import 'note.dart';

class Database {
  static final _databaseName = "notes.db";
  static final _databaseVersion = 1;

  static final table = 'notes';

  static final columnId = '_id';
  static final columnTitle = 'title';
  static final columnContent = 'content';

  // make this a singleton class
  Database._privateConstructor();
  static final Database instance = Database._privateConstructor();

  // only have a single app-wide reference to the database
  static Database _database;
  Future<Database> get database async {
    if (_database != null) return _database;
    _database = await _initDatabase();
    return _database;
  }

  // open the database
  _initDatabase() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, _databaseName);
    return await openDatabase(path,
        version: _databaseVersion, onCreate: _onCreate);
  }

  // SQL code to create the database table
  Future _onCreate(Database db, int version) async {
    await db.execute('''
          CREATE TABLE $table (
            $columnId INTEGER PRIMARY KEY,
            $columnTitle TEXT NOT NULL,
            $columnContent TEXT NOT NULL
          )
          ''');
  }

  // CRUD functions

  // Insert Operation: Insert a Note object to database
  Future<int> insert(Note note) async {
    Database db = await database;
    int id = await db.insert(table, note.toMap());
    return id;
  }

  // Select Operation: Get all Note objects from database
  Future<List<Note>> getAllNotes() async {
    Database db = await database;
    List<Map> maps = await db.query(table);
    List<Note> notes = [];
    if (maps
